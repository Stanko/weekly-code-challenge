{"version":3,"sources":["utils/random.js","week-three/js/game.js","week-three/js/index.js"],"names":["random","a","b","rng","Math","decimalPlaces","hasA","min","max","value","parseFloat","toFixed","round","BIRD_X","FRAME_DURATION","BIRD_DEFAULT_VELOCITY","BIRD_JUMP_VELOCITY","BIRD_JUMP_DECAY","BIRD_START_SPEED","BIRD_MAX_SPEED","BIRD_JUMP_DURATION","WALL_MIN_HEIGHT","WALL_MAX_HEIGHT","WALL_FIRST_X","WALL_DISTANCE","WALL_COUNT","BIRD_IMAGE_DOWN","BIRD_IMAGE_UP","BIRD_IMAGE_COLOR","GAME_OVER_IMAGE","GAME_OVER_IMAGE_COLOR","YOU_WON_IMAGE","YOU_WON_IMAGE_COLOR","CLOUD_COUNT","CLOUD_DISTANCE","CLOUD_IMAGE_1","CLOUD_IMAGE_2","CLOUD_IMAGE_3","LS_HIGH_SCORE_KEY","getTime","performance","now","Date","Game","constructor","width","height","e","code","toLowerCase","keys","space","canJump","restart","running","maxHeight","fieldElement","document","querySelector","bindEvents","distance","birdSpeed","bird","y","velocity","walls","generateWalls","clouds","generateClouds","render","lastUpdate","animate","stop","score","getScore","parseInt","localStorage","getItem","setItem","window","addEventListener","handleKeyDown","handleKeyUp","handleTouchMove","handleTouchStart","handleTouchEnd","destroy","removeEventListener","field","createEmptyField","drawClouds","drawWalls","drawBird","drawStats","ground","groundRow","i","push","length","unshift","bottom","left","draw","innerHTML","reverse","map","row","join","column","minHeight","x","top","cloudImages","cloudImage","image","replace","cloud","start","end","ceil","wall","drawWall","colorMap","imageReversed","colorMapReversed","forEach","split","pixel","fieldRow","content","highScore","checkForCrash","wallX","checkJump","jumpCount","update","delta","requestAnimationFrame","isHandHeld","Boolean","navigator","userAgent","match","startGame","MAX_WIDTH","singleCharElement","documentComputedStyle","getComputedStyle","documentElement","safeArea","getPropertyValue","ratio","innerWidth","innerHeight","horizontalPadding","verticalPadding","windowWidth","windowHeight","floor","clientWidth","clientHeight","console","log","game","timeout","clearTimeout","setTimeout","remove","pre","createElement","setAttribute","prepend"],"mappings":"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","file":"js.30fd76f8.js","sourceRoot":"../src","sourcesContent":["export default function random(a, b, rng = Math.random, decimalPlaces = 16) {\n  const hasA = typeof a !== 'undefined';\n  const hasB = typeof b !== 'undefined';\n\n  let min = 0;\n  let max = 1;\n\n  if (hasA && hasB) {\n    min = a;\n    max = b;\n  } else if (hasA) {\n    min = 0;\n    max = a;\n  }\n\n  const value = (rng || Math.random)() * (max - min) + min;\n\n  if (decimalPlaces) {\n    return parseFloat(value.toFixed(decimalPlaces));\n  }\n\n  return Math.round(value);\n}","import random from '../../utils/random';\n\n// ----------- CONSTANTS ----------- //\n\nconst BIRD_X = 10;\n\nconst FRAME_DURATION = 1000 / 60;\n\nconst BIRD_DEFAULT_VELOCITY = -0.15;\nconst BIRD_JUMP_VELOCITY = 0.15;\nconst BIRD_JUMP_DECAY = 0.015;\nconst BIRD_START_SPEED = 0.4;\nconst BIRD_MAX_SPEED = 1;\nconst BIRD_JUMP_DURATION = 12;\n\nconst WALL_MIN_HEIGHT = 0.2;\nconst WALL_MAX_HEIGHT = 0.6;\nconst WALL_FIRST_X = 60;\nconst WALL_DISTANCE = 40;\nconst WALL_COUNT = 100;\n\nconst BIRD_IMAGE_DOWN = [\n  '../\\\\..',\n  '>BIRD>',\n  '......',\n];\nconst BIRD_IMAGE_UP = [\n  '......',\n  '>BIRD>',\n  '..\\\\/..',\n];\nconst BIRD_IMAGE_COLOR = [\n  '  yy  ',\n  'yyyyyr',\n  '  yy  ',\n];\n\nconst GAME_OVER_IMAGE = [\n  '--------------------',\n  '|     GAME OVER    |',\n  '|                  |',\n  '|  TO RESTART TAP  |',\n  '|   OR PRESS \"R\"   |',\n  '--------------------',\n];\nconst GAME_OVER_IMAGE_COLOR = [\n  'bbbbbbbbbbbbbbbbbbbb',\n  'b     xxxx xxxx    b',\n  'b                  b',\n  'b  gg ggggggg ggg  b',\n  'b   gg ggggg ggg   b',\n  'bbbbbbbbbbbbbbbbbbbb',\n];\n\nconst YOU_WON_IMAGE = [\n  '--------------------',\n  '|     YOU WON!     |',\n  '|                  |',\n  '|  THANK YOU FOR   |',\n  '|     PLAYING      |',\n  '--------------------',\n];\nconst YOU_WON_IMAGE_COLOR = [\n  'gggggggggggggggggggg',\n  'g     www wwww     g',\n  'g                  g',\n  'g  ggggg ggg ggg   g',\n  'g     ggggggg      g',\n  'gggggggggggggggggggg',\n];\n\nconst CLOUD_COUNT = WALL_COUNT;\nconst CLOUD_DISTANCE = WALL_DISTANCE * 2;\n\nconst CLOUD_IMAGE_1 = [\n  '...CLOUD....',\n  'CLOUD.CLOUD.',\n  '.CLOUD.CLOUD',\n];\n\nconst CLOUD_IMAGE_2 = [\n  '.CLOUD.CLOUD.......',\n  'CLOUD..............',\n  '.......CLOUD.CLOUD',\n];\n\nconst CLOUD_IMAGE_3 = [\n  '.......CLOUD.....',\n  'CLOUD.CLOUD.CLOUD',\n  '.......CLOUD.....',\n  '.........CLOUD...'\n];\n\nconst LS_HIGH_SCORE_KEY = 'high-score';\n\nconst getTime = typeof performance === 'function' ? performance.now : Date.now;\n\nexport default class Game {\n  constructor({\n    width = 30,\n    height = 20,\n  }) {\n    this.width = width;\n    this.height = height;\n    this.maxHeight = this.height - 1;\n\n    this.fieldElement = document.querySelector('.field'),\n\n    this.bindEvents();\n    this.restart();\n  }\n\n  // ----------- START / STOP ----------- //\n\n  restart() {\n    this.running = true;\n    this.keys = {};\n    this.canJump = true;\n    this.distance = 0;\n    this.birdSpeed = BIRD_START_SPEED;\n\n    this.bird = {\n      y: 10,\n      velocity: BIRD_DEFAULT_VELOCITY,\n    };\n\n    this.walls = this.generateWalls();\n    this.clouds = this.generateClouds();\n\n    this.render();\n    this.lastUpdate = getTime();\n    this.animate();\n  }\n\n  stop() {\n    this.running = false;\n    const score = this.getScore();\n    const highScore = parseInt(localStorage.getItem(LS_HIGH_SCORE_KEY), 10) || 0;\n\n    if (score > highScore) {\n      localStorage.setItem(LS_HIGH_SCORE_KEY, score);\n    }\n  }\n\n  // ----------- EVENTS ----------- //\n\n  handleKeyDown = (e) => {\n    if (e.code.toLowerCase() === 'space') {\n      this.keys.space = true;\n    }\n  }\n\n  handleKeyUp = (e) => {\n    this.canJump = true;\n    this.keys = {};\n\n    if (e.code.toLowerCase() === 'keyr') {\n      this.restart();\n    }\n  }\n\n  handleTouchStart = (e) => {\n    if (this.running) {\n      // e.preventDefault();\n      // e.stopPropagation();\n    } else {\n      this.restart();\n    }\n    this.keys.space = true;\n  }\n\n  handleTouchMove = (e) => {\n    if (this.running) {\n      // e.preventDefault();\n      // e.stopPropagation();\n    }\n  }\n\n  handleTouchEnd = (e) => {\n    this.canJump = true;\n    this.keys = {};\n  };\n\n  bindEvents() {\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n    window.addEventListener('touchmove', this.handleTouchMove);\n    window.addEventListener('touchstart', this.handleTouchStart);\n    window.addEventListener('touchend', this.handleTouchEnd);\n    window.addEventListener('mousedown', this.handleTouchStart);\n    window.addEventListener('mouseup', this.handleTouchEnd);\n  }\n\n  destroy() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    window.removeEventListener('keyup', this.handleKeyUp);\n    window.removeEventListener('touchmove', this.handleTouchMove);\n    window.removeEventListener('touchstart', this.handleTouchStart);\n    window.removeEventListener('touchend', this.handleTouchEnd);\n    window.removeEventListener('mousedown', this.handleTouchStart);\n    window.removeEventListener('mouseup', this.handleTouchEnd);\n  }\n\n  // ----------- RENDER ----------- //\n\n  render() {\n    this.field = this.createEmptyField();\n\n    this.drawClouds();\n    this.drawWalls();\n    this.drawBird();\n    this.drawStats();\n\n    const ground =  [\n      '<span class=\"g\">G</span>',\n      '<span class=\"g\">R</span>',\n      '<span class=\"g\">O</span>',\n      '<span class=\"g\">U</span>',\n      '<span class=\"g\">N</span>',\n      '<span class=\"g\">D</span>',\n      ' ',\n    ];\n    const groundRow = [];\n    for (let i = 0; i < this.width; i++) {\n      groundRow.push(ground[(i + Math.round(this.distance)) % ground.length]);\n    }\n\n    this.field.unshift(groundRow);\n\n    if (!this.running) {\n      const bottom = Math.round(this.height / 2 - 3);\n      const left = Math.round(this.width / 2 - 10);\n\n      if (this.getScore() < WALL_COUNT) {\n        this.draw(GAME_OVER_IMAGE, bottom, left, GAME_OVER_IMAGE_COLOR);\n      } else {\n        this.draw(YOU_WON_IMAGE, bottom, left, YOU_WON_IMAGE_COLOR);\n      }      \n    }\n\n    this.fieldElement.innerHTML = this.field\n      .reverse()\n      .map((row) => {\n        return row.join('');\n      })\n      .join('<br />');\n  }\n\n  createEmptyField() {\n    const field = [];\n\n    for (let row = 0; row < this.height; row++) {\n      if (!field[row]) {\n        field[row] = [];\n      }\n\n      for (let column = 0; column < this.width; column++) {\n        field[row][column] = ' ';\n      }\n    }\n\n    return field;\n  }\n\n  generateWalls() {\n    const walls = [];\n    const maxHeight = Math.round(WALL_MAX_HEIGHT * this.height);\n    const minHeight = Math.round(WALL_MIN_HEIGHT * this.height);\n\n    for (let i = 0; i < WALL_COUNT; i++) {\n      walls.push({\n        height: random(minHeight, maxHeight, null, 0),\n        x: WALL_FIRST_X + i * WALL_DISTANCE,\n        top: Math.random() > 0.5,\n      });\n    }\n\n    return walls;\n  }\n\n  generateClouds() {\n    const clouds = [];\n    const cloudImages = [CLOUD_IMAGE_1, CLOUD_IMAGE_2, CLOUD_IMAGE_3];\n\n    for (let i = 0; i < CLOUD_COUNT; i++) {\n      const cloudImage = cloudImages[random(0, 2, null, 0)];\n\n      clouds.push({\n        image: cloudImage,\n        x: Math.round(i * (CLOUD_DISTANCE * random(0.5, 1.5))),\n        bottom: Math.round(this.height * 0.5 + random(0, this.height * 0.3)),\n      });\n    }\n\n    return clouds;\n  }\n\n  drawBird() {\n    const y = Math.round(this.bird.y) - 1;\n    const x = BIRD_X - 5; // minus bird's width\n\n    const image = this.bird.velocity > 0 ? [...BIRD_IMAGE_UP] : [...BIRD_IMAGE_DOWN];\n\n    if (!this.running) {\n      if (this.getScore() < WALL_COUNT) {\n        image[1] = image[1].replace('BIRD', 'NOES');\n      } else {\n        image[1] = image[1].replace('BIRD', 'EASY');\n      }\n    }\n\n    this.draw(image, y, x, BIRD_IMAGE_COLOR)\n  }\n\n  drawClouds() {\n    for (let i = 0; i < this.clouds.length; i++) {\n      const cloud = this.clouds[i];\n      const left = Math.round(cloud.x - this.distance * 0.5);\n      const MIN_LEFT = -20;\n      if (left < MIN_LEFT || left > this.width) {\n        continue;\n      }\n      this.draw(cloud.image, cloud.bottom, left);\n    }\n  }\n\n  drawWalls() {\n    let start = Math.round((this.distance - WALL_FIRST_X) / WALL_DISTANCE);\n\n    if (start < 0) {\n      start = 0;\n    }\n\n    let end = Math.ceil(start + this.width / WALL_DISTANCE);\n\n    if (end > this.walls.length - 1) {\n      end = this.walls.length - 1;\n    }\n\n    for (let i = start; i <= end; i++) {\n      const wall = this.walls[i];\n\n      if (wall.x < this.distance + this.width) {\n        this.drawWall(wall);\n      }\n    }\n  }\n\n  drawWall(wall) {\n    const image = [];\n    const colorMap = [];\n    const x = Math.round(wall.x - this.distance);\n\n    for (let i = 0; i < wall.height; i++) {\n      image.push('WALL');\n      colorMap.push('dddd');\n    }\n\n    let y = 0;\n    if (wall.top) {\n      y = this.height - wall.height;\n    }\n\n    this.draw(image, y, x, colorMap);\n  }\n\n  draw(image, bottom, left, colorMap = null) {\n    const imageReversed = [...image].reverse();\n    const colorMapReversed = colorMap ? [...colorMap].reverse() : null;\n\n    imageReversed.forEach((row, y) => {\n      row.split('').forEach((pixel, x) => {\n        const fieldRow = this.field[bottom + y];\n        \n        if (fieldRow && fieldRow[left + x]) {\n          if (pixel !== '.') {\n            let content = pixel;\n            if (colorMapReversed && colorMapReversed[y][x] !== ' ') {\n              content = `<span class=\"${colorMapReversed[y][x]}\">${pixel}</span>`\n            }\n            fieldRow[left + x] = content;\n          }\n        }\n      });\n    });\n  }\n\n  drawStats() {\n    const highScore = parseInt(localStorage.getItem(LS_HIGH_SCORE_KEY), 10) || 0;\n\n    const image = [\n      `score: ${this.getScore()}`,\n      ` best: ${highScore}`,\n    ];\n    const colorMap = [\n      'bbbbbb xxx',\n      ' bbbbb xxx',\n    ];\n    this.draw(image, this.height - 2, this.width - 10, colorMap);\n  }\n\n  // ----------- LOGIC ----------- //\n\n  checkForCrash() {\n    // Bird crashed into the  ground\n    if (this.bird.y < 0) {\n      this.stop();\n    }\n\n    // Bird crashed into a wall\n    for (let i = 0; i < this.walls.length; i++) {\n      const wall = this.walls[i];\n      const wallX = Math.round(wall.x - this.distance);\n\n      if (BIRD_X >= wallX - 1 && BIRD_X <= wallX + 2) {\n        if (wall.top) {\n          if (this.bird.y >= this.height - wall.height) {\n            this.stop();\n            return;\n          }\n        } else if (this.bird.y <= wall.height) {\n          this.stop();\n          return;\n        }\n      }\n    }\n  }\n\n  checkJump() {\n    if (this.keys.space && this.canJump) {\n      this.jumpCount++;\n      this.bird.velocity = (1 + 0.1 * this.jumpCount) * BIRD_JUMP_VELOCITY;\n\n      if (this.jumpCount > BIRD_JUMP_DURATION) {\n        this.jumpCount = 0;\n        this.canJump = false;\n      }\n    } else {\n      this.jumpCount = 0;\n    }\n  }\n\n  update(delta) {\n    this.distance += delta * this.birdSpeed;\n\n    this.bird.y += delta * this.bird.velocity;\n\n    if (this.bird.y > this.maxHeight) {\n      this.bird.y = this.maxHeight;\n    }\n\n    if (this.bird.velocity > BIRD_DEFAULT_VELOCITY) {\n      this.bird.velocity -= BIRD_JUMP_DECAY;\n    }\n\n    if (this.bird.velocity < BIRD_DEFAULT_VELOCITY) {\n      this.bird.velocity = BIRD_DEFAULT_VELOCITY;\n    }\n\n    if (this.birdSpeed < BIRD_MAX_SPEED) {\n      this.birdSpeed = BIRD_START_SPEED + this.distance / 1000;\n    }\n  }\n\n  animate() {\n    if (!this.running) {\n      return;\n    }\n\n    const now = getTime();\n    // We are checking how much time has passed since the last update\n    // and translating that to frames\n    const delta = (now - this.lastUpdate) / FRAME_DURATION;\n\n    this.checkJump(now);\n    this.update(delta);\n    this.checkForCrash();\n    this.render();\n\n    this.lastUpdate = now;\n\n    if (this.running) {\n      requestAnimationFrame(() => this.animate());\n    }\n  }\n\n  getScore() {\n    let score = Math.ceil((this.distance - WALL_FIRST_X) / WALL_DISTANCE);\n    if (score < 0) {\n      score = 0;\n    }\n\n    return score;\n  }\n}\n","import Game from './game';\n\n\nconst isHandHeld = Boolean(navigator.userAgent.match(/Android|iPhone|iPad|iPod/i));\n\nfunction startGame() {\n  const MAX_WIDTH = 100;\n  const MAX_HEIGHT = 30;\n\n  const singleCharElement = document.querySelector('.single-char');\n\n  const documentComputedStyle = getComputedStyle(document.documentElement);\n  \n  const safeArea = {\n    bottom: parseInt(documentComputedStyle.getPropertyValue('--safe-area-bottom'), 10),\n    left: parseInt(documentComputedStyle.getPropertyValue('--safe-area-left'), 10),\n    right: parseInt(documentComputedStyle.getPropertyValue('--safe-area-right'), 10),\n    top: parseInt(documentComputedStyle.getPropertyValue('--safe-area-top'), 10),\n  };\n\n  const ratio = window.innerWidth / window.innerHeight;\n  const handHeldHorizontalPadding = ratio > 1 ? 200 : 100;\n\n  const horizontalPadding = isHandHeld ? handHeldHorizontalPadding : 150;\n  const verticalPadding = isHandHeld ? 150 : 50;\n  const windowWidth = window.innerWidth - horizontalPadding - safeArea.left - safeArea.right;\n\n  const windowHeight = window.innerHeight - verticalPadding - safeArea.top - safeArea.bottom;\n\n  let width = Math.floor(windowWidth / singleCharElement.clientWidth);\n  let height = Math.floor(windowHeight / singleCharElement.clientHeight);\n\n  console.log(width, height)\n\n  if (width > MAX_WIDTH) {\n    width = MAX_WIDTH;\n  }\n  if (height > MAX_HEIGHT) {\n    height = MAX_HEIGHT; \n  }\n\n  return new Game({\n    width,\n    height,\n  });\n}\n\nlet game = startGame();\n\nlet timeout = null;\n\nwindow.addEventListener('resize', () => {\n  clearTimeout(timeout);\n  timeout = setTimeout(() => {\n    if (game) {\n      game.destroy();\n      document.querySelector('.field').remove();\n\n      const pre = document.createElement('pre');\n      pre.setAttribute('class', 'field');\n      document.querySelector('.wrapper').prepend(pre)\n    }\n    game = startGame()\n  }, 200);\n});\n"]}